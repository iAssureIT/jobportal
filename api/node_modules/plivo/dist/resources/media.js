'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MediaInterface = exports.Media = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _common = require('../utils/common.js');

var _base = require('../base');

var _lodash = require('lodash');

var _ = _interopRequireWildcard(_lodash);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var fs = require('fs');

var clientKey = Symbol();
var action = 'Media/';
var idField = 'media_id';

/**
 * Represents a Message
 * @constructor
 * @param {function} client - make api call
 * @param {object} [data] - data of call
 */

var Media = exports.Media = function (_PlivoResource) {
  _inherits(Media, _PlivoResource);

  function Media(client) {
    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Media);

    var _this = _possibleConstructorReturn(this, (Media.__proto__ || Object.getPrototypeOf(Media)).call(this, action, Media, idField, client));

    if (idField in data) {
      _this.id = data[idField];
    }

    (0, _common.extend)(_this, data);
    return _this;
  }

  return Media;
}(_base.PlivoResource);
/**
 * Represents a Media Interface
 * @constructor
 * @param {function} client - make api call
 * @param {object} [data] - data of call
 */

var MediaInterface = exports.MediaInterface = function (_PlivoResourceInterfa) {
  _inherits(MediaInterface, _PlivoResourceInterfa);

  function MediaInterface(client) {
    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, MediaInterface);

    var _this2 = _possibleConstructorReturn(this, (MediaInterface.__proto__ || Object.getPrototypeOf(MediaInterface)).call(this, action, Media, idField, client));

    (0, _common.extend)(_this2, data);
    _this2[clientKey] = client;
    return _this2;
  }

  /**
   * Upload Media
   * @method
   * @fail {Error} return Error
   */


  _createClass(MediaInterface, [{
    key: 'upload',
    value: function upload(files) {
      var errors = (0, _common.validate)([{
        field: 'files',
        value: files,
        validators: ['isRequired']
      }]);

      if (errors) {
        return errors;
      }
      var params = {};
      params.file = files;
      return _get(MediaInterface.prototype.__proto__ || Object.getPrototypeOf(MediaInterface.prototype), 'create', this).call(this, params);
    }

    /**
     * Get Media by given id
     * @method
     * @param {string} media_id - id of media
     * @promise {object} return {@link Media} object if success
     * @fail {Error} return Error
     */

  }, {
    key: 'get',
    value: function get(media_id) {
      var errors = (0, _common.validate)([{
        field: 'media_id',
        value: media_id,
        validators: ['isRequired']
      }]);

      if (errors) {
        return errors;
      }

      return _get(MediaInterface.prototype.__proto__ || Object.getPrototypeOf(MediaInterface.prototype), 'get', this).call(this, media_id);
    }

    /**
     * Get All Media Detail
     * @method
     * @param {object} params - params to get all media details.
     * @promise {object[]} returns list of Media Object
     * @fail {Error} returns Error
     */

  }, {
    key: 'list',
    value: function list(params) {
      return _get(MediaInterface.prototype.__proto__ || Object.getPrototypeOf(MediaInterface.prototype), 'list', this).call(this, params);
    }
  }]);

  return MediaInterface;
}(_base.PlivoResourceInterface);