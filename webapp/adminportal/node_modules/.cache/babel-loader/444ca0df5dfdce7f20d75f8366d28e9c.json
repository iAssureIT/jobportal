{"ast":null,"code":"import { d as _inherits, a as _createClass, b as _classCallCheck, e as _possibleConstructorReturn, f as _getPrototypeOf } from '../_rollupPluginBabelHelpers-3c58f0e3.js';\nimport IMask from '../core/holder.js';\nimport MaskElement from './mask-element.js';\n/** Bridge between HTMLElement and {@link Masked} */\n\nvar HTMLMaskElement = /*#__PURE__*/function (_MaskElement) {\n  _inherits(HTMLMaskElement, _MaskElement);\n  /** Mapping between HTMLElement events and mask internal events */\n\n  /** HTMLElement to use mask on */\n\n  /**\r\n    @param {HTMLInputElement|HTMLTextAreaElement} input\r\n  */\n\n\n  function HTMLMaskElement(input) {\n    var _this;\n\n    _classCallCheck(this, HTMLMaskElement);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HTMLMaskElement).call(this));\n    _this.input = input;\n    _this._handlers = {};\n    return _this;\n  }\n  /** */\n  // $FlowFixMe https://github.com/facebook/flow/issues/2839\n\n\n  _createClass(HTMLMaskElement, [{\n    key: \"_unsafeSelect\",\n\n    /**\r\n      Sets HTMLElement selection\r\n      @override\r\n    */\n    value: function _unsafeSelect(start, end) {\n      this.input.setSelectionRange(start, end);\n    }\n    /**\r\n      HTMLElement value\r\n      @override\r\n    */\n\n  }, {\n    key: \"bindEvents\",\n\n    /**\r\n      Binds HTMLElement events to mask internal events\r\n      @override\r\n    */\n    value: function bindEvents(handlers) {\n      var _this2 = this;\n\n      Object.keys(handlers).forEach(function (event) {\n        return _this2._toggleEventHandler(HTMLMaskElement.EVENTS_MAP[event], handlers[event]);\n      });\n    }\n    /**\r\n      Unbinds HTMLElement events to mask internal events\r\n      @override\r\n    */\n\n  }, {\n    key: \"unbindEvents\",\n    value: function unbindEvents() {\n      var _this3 = this;\n\n      Object.keys(this._handlers).forEach(function (event) {\n        return _this3._toggleEventHandler(event);\n      });\n    }\n    /** */\n\n  }, {\n    key: \"_toggleEventHandler\",\n    value: function _toggleEventHandler(event, handler) {\n      if (this._handlers[event]) {\n        this.input.removeEventListener(event, this._handlers[event]);\n        delete this._handlers[event];\n      }\n\n      if (handler) {\n        this.input.addEventListener(event, handler);\n        this._handlers[event] = handler;\n      }\n    }\n  }, {\n    key: \"rootElement\",\n    get: function get() {\n      return this.input.getRootNode ? this.input.getRootNode() : document;\n    }\n    /**\r\n      Is element in focus\r\n      @readonly\r\n    */\n\n  }, {\n    key: \"isActive\",\n    get: function get() {\n      //$FlowFixMe\n      return this.input === this.rootElement.activeElement;\n    }\n    /**\r\n      Returns HTMLElement selection start\r\n      @override\r\n    */\n\n  }, {\n    key: \"_unsafeSelectionStart\",\n    get: function get() {\n      return this.input.selectionStart;\n    }\n    /**\r\n      Returns HTMLElement selection end\r\n      @override\r\n    */\n\n  }, {\n    key: \"_unsafeSelectionEnd\",\n    get: function get() {\n      return this.input.selectionEnd;\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.input.value;\n    },\n    set: function set(value) {\n      this.input.value = value;\n    }\n  }]);\n\n  return HTMLMaskElement;\n}(MaskElement);\n\nHTMLMaskElement.EVENTS_MAP = {\n  selectionChange: 'keydown',\n  input: 'input',\n  drop: 'drop',\n  click: 'click',\n  focus: 'focus',\n  commit: 'blur'\n};\nIMask.HTMLMaskElement = HTMLMaskElement;\nexport default HTMLMaskElement;","map":{"version":3,"sources":["/home/mani/projects/jobportal/webapp/adminportal/node_modules/imask/esm/controls/html-mask-element.js"],"names":["d","_inherits","a","_createClass","b","_classCallCheck","e","_possibleConstructorReturn","f","_getPrototypeOf","IMask","MaskElement","HTMLMaskElement","_MaskElement","input","_this","call","_handlers","key","value","_unsafeSelect","start","end","setSelectionRange","bindEvents","handlers","_this2","Object","keys","forEach","event","_toggleEventHandler","EVENTS_MAP","unbindEvents","_this3","handler","removeEventListener","addEventListener","get","getRootNode","document","rootElement","activeElement","selectionStart","selectionEnd","set","selectionChange","drop","click","focus","commit"],"mappings":"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","sourcesContent":["import { d as _inherits, a as _createClass, b as _classCallCheck, e as _possibleConstructorReturn, f as _getPrototypeOf } from '../_rollupPluginBabelHelpers-3c58f0e3.js';\nimport IMask from '../core/holder.js';\nimport MaskElement from './mask-element.js';\n\n/** Bridge between HTMLElement and {@link Masked} */\n\nvar HTMLMaskElement =\n/*#__PURE__*/\nfunction (_MaskElement) {\n  _inherits(HTMLMaskElement, _MaskElement);\n\n  /** Mapping between HTMLElement events and mask internal events */\n\n  /** HTMLElement to use mask on */\n\n  /**\r\n    @param {HTMLInputElement|HTMLTextAreaElement} input\r\n  */\n  function HTMLMaskElement(input) {\n    var _this;\n\n    _classCallCheck(this, HTMLMaskElement);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HTMLMaskElement).call(this));\n    _this.input = input;\n    _this._handlers = {};\n    return _this;\n  }\n  /** */\n  // $FlowFixMe https://github.com/facebook/flow/issues/2839\n\n\n  _createClass(HTMLMaskElement, [{\n    key: \"_unsafeSelect\",\n\n    /**\r\n      Sets HTMLElement selection\r\n      @override\r\n    */\n    value: function _unsafeSelect(start, end) {\n      this.input.setSelectionRange(start, end);\n    }\n    /**\r\n      HTMLElement value\r\n      @override\r\n    */\n\n  }, {\n    key: \"bindEvents\",\n\n    /**\r\n      Binds HTMLElement events to mask internal events\r\n      @override\r\n    */\n    value: function bindEvents(handlers) {\n      var _this2 = this;\n\n      Object.keys(handlers).forEach(function (event) {\n        return _this2._toggleEventHandler(HTMLMaskElement.EVENTS_MAP[event], handlers[event]);\n      });\n    }\n    /**\r\n      Unbinds HTMLElement events to mask internal events\r\n      @override\r\n    */\n\n  }, {\n    key: \"unbindEvents\",\n    value: function unbindEvents() {\n      var _this3 = this;\n\n      Object.keys(this._handlers).forEach(function (event) {\n        return _this3._toggleEventHandler(event);\n      });\n    }\n    /** */\n\n  }, {\n    key: \"_toggleEventHandler\",\n    value: function _toggleEventHandler(event, handler) {\n      if (this._handlers[event]) {\n        this.input.removeEventListener(event, this._handlers[event]);\n        delete this._handlers[event];\n      }\n\n      if (handler) {\n        this.input.addEventListener(event, handler);\n        this._handlers[event] = handler;\n      }\n    }\n  }, {\n    key: \"rootElement\",\n    get: function get() {\n      return this.input.getRootNode ? this.input.getRootNode() : document;\n    }\n    /**\r\n      Is element in focus\r\n      @readonly\r\n    */\n\n  }, {\n    key: \"isActive\",\n    get: function get() {\n      //$FlowFixMe\n      return this.input === this.rootElement.activeElement;\n    }\n    /**\r\n      Returns HTMLElement selection start\r\n      @override\r\n    */\n\n  }, {\n    key: \"_unsafeSelectionStart\",\n    get: function get() {\n      return this.input.selectionStart;\n    }\n    /**\r\n      Returns HTMLElement selection end\r\n      @override\r\n    */\n\n  }, {\n    key: \"_unsafeSelectionEnd\",\n    get: function get() {\n      return this.input.selectionEnd;\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.input.value;\n    },\n    set: function set(value) {\n      this.input.value = value;\n    }\n  }]);\n\n  return HTMLMaskElement;\n}(MaskElement);\nHTMLMaskElement.EVENTS_MAP = {\n  selectionChange: 'keydown',\n  input: 'input',\n  drop: 'drop',\n  click: 'click',\n  focus: 'focus',\n  commit: 'blur'\n};\nIMask.HTMLMaskElement = HTMLMaskElement;\n\nexport default HTMLMaskElement;\n"]},"metadata":{},"sourceType":"module"}