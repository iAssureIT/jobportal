{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ToWords = void 0;\nconst DefaultConverterOptions = {\n  currency: false,\n  ignoreDecimal: false,\n  ignoreZeroCurrency: false\n};\n\nclass ToWords {\n  constructor(options = {}) {\n    this.options = {};\n    this.locale = undefined;\n    this.options = Object.assign({\n      localeCode: 'en-IN',\n      converterOptions: DefaultConverterOptions\n    }, options);\n  }\n\n  getLocaleClass() {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    return require(`./locales/${this.options.localeCode}`).Locale;\n  }\n\n  getLocale() {\n    if (this.locale === undefined) {\n      try {\n        const LocaleClass = this.getLocaleClass();\n        this.locale = new LocaleClass();\n      } catch (e) {\n        throw new Error(`Unknown Locale \"${this.options.localeCode}\"`);\n      }\n    }\n\n    return this.locale;\n  }\n\n  convert(number, options = {}) {\n    options = Object.assign({}, this.options.converterOptions, options);\n\n    if (!this.isValidNumber(number)) {\n      throw new Error(`Invalid Number \"${number}\"`);\n    }\n\n    const locale = this.getLocale();\n    let isFloat = this.isFloat(number);\n\n    if (options.ignoreDecimal) {\n      number = Number.parseInt(number.toString());\n      isFloat = false;\n    }\n\n    const isNegativeNumber = number < 0;\n\n    if (isNegativeNumber) {\n      number = Math.abs(number);\n    }\n\n    if (options.currency) {\n      number = this.toFixed(number); // Extra check for isFloat to overcome 1.999 rounding off to 2\n\n      isFloat = this.isFloat(number);\n      const isNumberZero = number >= 0 && number < 1;\n      const split = number.toString().split('.');\n      let words = `${this.convertInternal(Number(split[0]), options)} ${locale.currency.plural}`;\n\n      if (isNumberZero && options.ignoreZeroCurrency) {\n        words = '';\n      }\n\n      let wordsWithDecimal = '';\n\n      if (isFloat) {\n        if (!isNumberZero || !options.ignoreZeroCurrency) {\n          wordsWithDecimal += ` ${locale.texts.and} `;\n        }\n\n        wordsWithDecimal += `${this.convertInternal(Number(split[1]) * Math.pow(10, 2 - split[1].length), options)} ${locale.currency.fractionalUnit.plural}`;\n      }\n\n      const isEmpty = words.length <= 0 && wordsWithDecimal.length <= 0;\n      return (!isEmpty && isNegativeNumber ? `${locale.texts.minus} ` : '') + words + wordsWithDecimal + (!isEmpty ? ` ${locale.texts.only}` : '');\n    } else {\n      const split = number.toString().split('.');\n      const words = this.convertInternal(Number(split[0]), options);\n      let wordsWithDecimal = '';\n\n      if (isFloat) {\n        wordsWithDecimal += ` ${locale.texts.point} `;\n\n        if (split[1].startsWith('0')) {\n          const zeroWords = [];\n\n          for (const num of split[1]) {\n            zeroWords.push(this.convertInternal(Number(num)));\n          }\n\n          wordsWithDecimal += zeroWords.join(' ');\n        } else {\n          wordsWithDecimal += this.convertInternal(Number(split[1]), options);\n        }\n      }\n\n      const isEmpty = words.length <= 0 && wordsWithDecimal.length <= 0;\n      return (!isEmpty && isNegativeNumber ? `${locale.texts.minus} ` : '') + words + wordsWithDecimal;\n    }\n  }\n\n  convertInternal(number, options = {}) {\n    const locale = this.getLocale();\n    const match = locale.numberWordsMapping.find(elem => {\n      return number >= elem.number;\n    });\n\n    if (!match) {\n      throw new Error(`Invalid Number \"${number}\"`);\n    }\n\n    let words = '';\n\n    if (number <= 100) {\n      words += match.value;\n      number -= match.number;\n\n      if (number > 0) {\n        words += ` ${this.convertInternal(number, options)}`;\n      }\n    } else {\n      const quotient = Math.floor(number / match.number);\n      const remainder = number % match.number;\n\n      if (remainder > 0) {\n        return `${this.convertInternal(quotient, options)} ${match.value} ${this.convertInternal(remainder, options)}`;\n      } else {\n        return `${this.convertInternal(quotient, options)} ${match.value}`;\n      }\n    }\n\n    return words;\n  }\n\n  toFixed(number, precision = 2) {\n    return Number(Number(number).toFixed(precision));\n  }\n\n  isFloat(number) {\n    return Number(number) === number && number % 1 !== 0;\n  }\n\n  isValidNumber(number) {\n    return !isNaN(parseFloat(number)) && isFinite(number);\n  }\n\n}\n\nexports.ToWords = ToWords;","map":{"version":3,"sources":["/home/mani/projects/jobportal/webapp/adminportal/node_modules/to-words/dist/to-words.js"],"names":["Object","defineProperty","exports","value","ToWords","DefaultConverterOptions","currency","ignoreDecimal","ignoreZeroCurrency","constructor","options","locale","undefined","assign","localeCode","converterOptions","getLocaleClass","require","Locale","getLocale","LocaleClass","e","Error","convert","number","isValidNumber","isFloat","Number","parseInt","toString","isNegativeNumber","Math","abs","toFixed","isNumberZero","split","words","convertInternal","plural","wordsWithDecimal","texts","and","pow","length","fractionalUnit","isEmpty","minus","only","point","startsWith","zeroWords","num","push","join","match","numberWordsMapping","find","elem","quotient","floor","remainder","precision","isNaN","parseFloat","isFinite"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ToWords = void 0;\nconst DefaultConverterOptions = {\n    currency: false,\n    ignoreDecimal: false,\n    ignoreZeroCurrency: false,\n};\nclass ToWords {\n    constructor(options = {}) {\n        this.options = {};\n        this.locale = undefined;\n        this.options = Object.assign({\n            localeCode: 'en-IN',\n            converterOptions: DefaultConverterOptions,\n        }, options);\n    }\n    getLocaleClass() {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        return require(`./locales/${this.options.localeCode}`).Locale;\n    }\n    getLocale() {\n        if (this.locale === undefined) {\n            try {\n                const LocaleClass = this.getLocaleClass();\n                this.locale = new LocaleClass();\n            }\n            catch (e) {\n                throw new Error(`Unknown Locale \"${this.options.localeCode}\"`);\n            }\n        }\n        return this.locale;\n    }\n    convert(number, options = {}) {\n        options = Object.assign({}, this.options.converterOptions, options);\n        if (!this.isValidNumber(number)) {\n            throw new Error(`Invalid Number \"${number}\"`);\n        }\n        const locale = this.getLocale();\n        let isFloat = this.isFloat(number);\n        if (options.ignoreDecimal) {\n            number = Number.parseInt(number.toString());\n            isFloat = false;\n        }\n        const isNegativeNumber = number < 0;\n        if (isNegativeNumber) {\n            number = Math.abs(number);\n        }\n        if (options.currency) {\n            number = this.toFixed(number);\n            // Extra check for isFloat to overcome 1.999 rounding off to 2\n            isFloat = this.isFloat(number);\n            const isNumberZero = number >= 0 && number < 1;\n            const split = number.toString().split('.');\n            let words = `${this.convertInternal(Number(split[0]), options)} ${locale.currency.plural}`;\n            if (isNumberZero && options.ignoreZeroCurrency) {\n                words = '';\n            }\n            let wordsWithDecimal = '';\n            if (isFloat) {\n                if (!isNumberZero || !options.ignoreZeroCurrency) {\n                    wordsWithDecimal += ` ${locale.texts.and} `;\n                }\n                wordsWithDecimal += `${this.convertInternal(Number(split[1]) * Math.pow(10, 2 - split[1].length), options)} ${locale.currency.fractionalUnit.plural}`;\n            }\n            const isEmpty = words.length <= 0 && wordsWithDecimal.length <= 0;\n            return ((!isEmpty && isNegativeNumber ? `${locale.texts.minus} ` : '') +\n                words +\n                wordsWithDecimal +\n                (!isEmpty ? ` ${locale.texts.only}` : ''));\n        }\n        else {\n            const split = number.toString().split('.');\n            const words = this.convertInternal(Number(split[0]), options);\n            let wordsWithDecimal = '';\n            if (isFloat) {\n                wordsWithDecimal += ` ${locale.texts.point} `;\n                if (split[1].startsWith('0')) {\n                    const zeroWords = [];\n                    for (const num of split[1]) {\n                        zeroWords.push(this.convertInternal(Number(num)));\n                    }\n                    wordsWithDecimal += zeroWords.join(' ');\n                }\n                else {\n                    wordsWithDecimal += this.convertInternal(Number(split[1]), options);\n                }\n            }\n            const isEmpty = words.length <= 0 && wordsWithDecimal.length <= 0;\n            return ((!isEmpty && isNegativeNumber ? `${locale.texts.minus} ` : '') +\n                words +\n                wordsWithDecimal);\n        }\n    }\n    convertInternal(number, options = {}) {\n        const locale = this.getLocale();\n        const match = locale.numberWordsMapping.find((elem) => {\n            return number >= elem.number;\n        });\n        if (!match) {\n            throw new Error(`Invalid Number \"${number}\"`);\n        }\n        let words = '';\n        if (number <= 100) {\n            words += match.value;\n            number -= match.number;\n            if (number > 0) {\n                words += ` ${this.convertInternal(number, options)}`;\n            }\n        }\n        else {\n            const quotient = Math.floor(number / match.number);\n            const remainder = number % match.number;\n            if (remainder > 0) {\n                return `${this.convertInternal(quotient, options)} ${match.value} ${this.convertInternal(remainder, options)}`;\n            }\n            else {\n                return `${this.convertInternal(quotient, options)} ${match.value}`;\n            }\n        }\n        return words;\n    }\n    toFixed(number, precision = 2) {\n        return Number(Number(number).toFixed(precision));\n    }\n    isFloat(number) {\n        return Number(number) === number && number % 1 !== 0;\n    }\n    isValidNumber(number) {\n        return !isNaN(parseFloat(number)) && isFinite(number);\n    }\n}\nexports.ToWords = ToWords;\n"]},"metadata":{},"sourceType":"script"}