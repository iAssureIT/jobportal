{"ast":null,"code":"var _jsxFileName = \"/home/mani/projects/jobportal/webapp/adminportal/src/projectadmin/ContractManagement/CityClassificationTable/CityClassificationTable.js\";\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport axios from 'axios';\nimport $ from 'jquery';\nimport jQuery from 'jquery';\nimport './CityClassificationTable.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/js/modal.js';\n\nclass CityClassificationTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityNameArray: []\n    };\n  }\n  /*======= componentDidMount() =======*/\n\n\n  componentDidMount() {\n    this.getCityNames(); // console.log(\"props = \", this.props);\n  }\n  /*======= getCityNames() =======*/\n\n\n  getCityNames() {\n    axios.get(\"/api/citynamemaster/get/cities/list\").then(response => {\n      console.log(\"City Data => \", response.data);\n\n      if (response.data && response.data.length > 0) {\n        const listOfCityClasses = [];\n        const map = new Map();\n\n        for (const item of response.data) {\n          if (!map.has(item.cityTypeId)) {\n            map.set(item.cityTypeId, true);\n            listOfCityClasses.push({\n              cityTypeId: item.cityTypeId,\n              cityType: item.cityType\n            });\n          }\n        }\n\n        console.log(\"City Classes => \", listOfCityClasses);\n        this.setState({\n          cityNameArray: response.data.sort((a, b) => a.cityName > b.cityName ? 1 : -1),\n          listOfCityClasses: listOfCityClasses.sort((a, b) => a.cityType > b.cityType ? 1 : -1)\n        });\n      }\n    }).catch(error => {\n      console.log(\"Error getCityNames() = \", error);\n    });\n  }\n  /*======= toggleBillingCodes() =======*/\n\n\n  toggleCityClassification(event) {\n    console.log(\"event = \", event.target);\n    $(\".tablePanel\").slideToggle(\"slow\");\n    $(\".angleRight\").toggleClass(\"angledown\");\n\n    if ($(\".angleRight\").hasClass(\"angledown\")) {\n      $(\".titleCityClassification\").text(\"Click to Hide City Classification Table\");\n    } else {\n      $(\".titleCityClassification\").text(\"Click to See City Classification Table\");\n    }\n  }\n  /*======= render() =======*/\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-fluid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-lg-12 col-md-12 col-xs-12 col-sm-12 NOpadding\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-lg-12 col-md-12 col-xs-12 col-sm-12 NOpadding cityClassificationTitleDiv\",\n      onClick: this.toggleCityClassification.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"billingCodesTableTitle col-lg-12 col-md-12 col-xs-12 col-sm-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      id: \"titleCityClassification\",\n      className: \"titleCityClassification\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 19\n      }\n    }, \" Click to See City Classification Table \"), \"\\xA0\", /*#__PURE__*/React.createElement(\"i\", {\n      className: \"angleRotate angleRight fa fa-angle-right pull-right\",\n      id: \"angleRight\",\n      \"aria-hidden\": \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 19\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"tablePanel\",\n      className: \"tablePanel col-lg-12 col-md-12 col-xs-12 col-sm-12 NOpadding\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"table\", {\n      className: \"cityClassificationTable\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      className: \"cityClass\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 19\n      }\n    }, \"City Class\"), /*#__PURE__*/React.createElement(\"th\", {\n      className: \"cityName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 19\n      }\n    }, \"City Names\")), this.state.listOfCityClasses && this.state.listOfCityClasses.length > 0 ? this.state.listOfCityClasses.map((d, i, array) => {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        key: i,\n        className: \"\",\n        style: {\n          \"marginBottom\": \"5px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"h6\", {\n        className: \"cityClassTitle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 37\n        }\n      }, \" \", d.cityType, \" \")), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 33\n        }\n      }, this.state.cityNameArray && this.state.cityNameArray.length > 0 ? /*#__PURE__*/React.createElement(\"span\", {\n        className: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 37\n        }\n      }, this.state.cityNameArray.map((citydata, index, array) => {\n        if (d.cityTypeId === citydata.cityTypeId) {\n          return /*#__PURE__*/React.createElement(\"span\", {\n            key: index,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 53\n            }\n          }, citydata.cityName ? citydata.cityName + \" | \" : \"\");\n        }\n      })) : null));\n    }) : null)))));\n  }\n\n}\n\nexport default CityClassificationTable;","map":{"version":3,"sources":["/home/mani/projects/jobportal/webapp/adminportal/src/projectadmin/ContractManagement/CityClassificationTable/CityClassificationTable.js"],"names":["React","Component","render","axios","$","jQuery","CityClassificationTable","constructor","props","state","cityNameArray","componentDidMount","getCityNames","get","then","response","console","log","data","length","listOfCityClasses","map","Map","item","has","cityTypeId","set","push","cityType","setState","sort","a","b","cityName","catch","error","toggleCityClassification","event","target","slideToggle","toggleClass","hasClass","text","bind","d","i","array","citydata","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { render }           from 'react-dom';\nimport axios                from 'axios';\nimport $                    from 'jquery';\nimport jQuery               from 'jquery';\n\nimport './CityClassificationTable.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/js/modal.js';\n\nclass CityClassificationTable extends Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityNameArray : []\n    }\n  }\n  /*======= componentDidMount() =======*/\n  componentDidMount(){\n    this.getCityNames();\n    // console.log(\"props = \", this.props);\n  }\n  /*======= getCityNames() =======*/\n  getCityNames(){\n        axios.get(\"/api/citynamemaster/get/cities/list\")\n        .then((response)=>{\n          console.log(\"City Data => \",response.data);\n          if (response.data && response.data.length>0) {\n            const listOfCityClasses = [];\n            const map = new Map();\n            for (const item of response.data) {\n                if(!map.has(item.cityTypeId)){\n                    map.set(item.cityTypeId, true);\n                    listOfCityClasses.push({\n                        cityTypeId   : item.cityTypeId,\n                        cityType     : item.cityType\n                    });\n                }\n            }\n            console.log(\"City Classes => \",listOfCityClasses);\n            this.setState({\n              cityNameArray     : response.data.sort((a, b) => (a.cityName > b.cityName) ? 1 : -1),\n              listOfCityClasses : listOfCityClasses.sort((a, b) => (a.cityType > b.cityType) ? 1 : -1),\n            })\n          }\n        })\n        .catch((error)=>{\n          console.log(\"Error getCityNames() = \", error);\n        })\n    }\n  /*======= toggleBillingCodes() =======*/\n  toggleCityClassification(event){\n    console.log(\"event = \", event.target);\n    $(\".tablePanel\").slideToggle(\"slow\");\n    $(\".angleRight\").toggleClass(\"angledown\"); \n\n    if($(\".angleRight\").hasClass(\"angledown\")){\n      $(\".titleCityClassification\").text(\"Click to Hide City Classification Table\");\n    }else{\n      $(\".titleCityClassification\").text(\"Click to See City Classification Table\");\n    }\n  }\n  /*======= render() =======*/\n  render(){    \n    return(\n        <div className=\"container-fluid\">\n          <div className=\"col-lg-12 col-md-12 col-xs-12 col-sm-12 NOpadding\">\n            <div className=\"col-lg-12 col-md-12 col-xs-12 col-sm-12 NOpadding cityClassificationTitleDiv\" onClick={this.toggleCityClassification.bind(this)}>\n                <h4 className=\"billingCodesTableTitle col-lg-12 col-md-12 col-xs-12 col-sm-12\">\n                  <span id=\"titleCityClassification\" className=\"titleCityClassification\"> Click to See City Classification Table </span>&nbsp; \n                  <i className=\"angleRotate angleRight fa fa-angle-right pull-right\" id=\"angleRight\" aria-hidden=\"true\"></i>\n                </h4>\n            </div>\n            <div id={\"tablePanel\"} className=\"tablePanel col-lg-12 col-md-12 col-xs-12 col-sm-12 NOpadding\">\n              <table className=\"cityClassificationTable\">\n              <tbody>\n                <tr>\n                  <th className=\"cityClass\">City Class</th>\n                  <th className=\"cityName\">City Names</th>\n                </tr>\n                 \n                    {this.state.listOfCityClasses && this.state.listOfCityClasses.length > 0\n                      ?\n                      this.state.listOfCityClasses.map((d, i, array) => {\n                        return (\n                            <tr key={i} className=\"\" style={{\"marginBottom\" : \"5px\"}}> \n                                <td>\n                                    <h6 className=\"cityClassTitle\"> {d.cityType} </h6>\n                                </td>   \n                                <td className=\"\">\n                                    {this.state.cityNameArray && this.state.cityNameArray.length > 0\n                                    ?\n                                    <span className=\"\">\n                                        {this.state.cityNameArray.map((citydata, index, array) => {\n                                            if(d.cityTypeId === citydata.cityTypeId){                                                                          \n                                                return (\n                                                    <span key={index}>{citydata.cityName ? citydata.cityName + \" | \" : \"\"}</span>                                                                                                                                                                                             \n                                                    \n                                                );\n                                            }\n                                        })}\n                                    </span>\n                                   \n                                    : \n                                        null\n                                    }\n                                </td>\n                            </tr>\n                          )\n                    })\n:\n                  null\n                    }\n                   \n                \n                                \n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      );\n  }\n\n }\n\n export default CityClassificationTable;"]},"metadata":{},"sourceType":"module"}