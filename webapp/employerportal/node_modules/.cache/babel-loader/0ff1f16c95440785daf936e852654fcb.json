{"ast":null,"code":"var _jsxFileName = \"/home/mani/projects/jobportal/webapp/employerportal/src/coreadmin/Master/BulkUpload/BulkUpload.js\";\nimport React, { Component } from 'react';\nimport XLSX from \"xlsx\";\nimport './BulkUpload.css';\nimport axios from 'axios';\nimport swal from 'sweetalert';\nimport $ from 'jquery';\nimport IAssureTable from \"./IAssureTable.js\";\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\nimport Loader from '../../common/Loader/Loader.js';\n\nclass BulkUpload extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      \"inputFileData\": [],\n      tableData: [],\n      failedRecordsTable: [],\n      tableObjects: {\n        paginationApply: false,\n        searchApply: false\n      },\n      \"startRange\": 0,\n      \"limitRange\": 10000\n    };\n    this.fileInput = React.createRef();\n    this.handleChange = this.handleChange.bind(this);\n    this.handleFile = this.handleFile.bind(this);\n  }\n\n  componentWillReceiveProps() {}\n\n  handleChange(e) {\n    const files = e.target.files;\n\n    if (files && files[0]) {\n      var fileName = files[0].name;\n      var ext = fileName.split('.').pop();\n\n      if (ext === 'csv' || ext === 'xlsx' || ext === 'xls') {\n        this.handleFile(files[0]);\n      } else {\n        this.fileInput.value = '';\n        swal({\n          title: \" \",\n          text: \"Invalid file format.\"\n        });\n      }\n    }\n  }\n\n  handleFile(file) {\n    $('.fullpageloader').show();\n    this.setState({\n      fileName: file.name\n    }); // console.log(\"this.fileInput\",this.fileInput.value);\n\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n\n    reader.onload = ({\n      target: {\n        result\n      }\n    }) => {\n      const wb = XLSX.read(result, {\n        type: rABS ? \"binary\" : \"array\"\n      }); // console.log(\"wb\",wb);\n\n      const wsname = wb.SheetNames[0]; // console.log(\"wsname\",wsname);\n\n      const ws = wb.Sheets[wsname]; // console.log(\"ws\",ws);\n\n      const data = XLSX.utils.sheet_to_json(ws, {\n        header: 1\n      }); //console.log(\"data\",data);\n\n      var documentObj = [];\n      let count = 0;\n\n      for (var j = 1; j <= data.length; j++) {\n        var record = data[j];\n        var attributeArray = [];\n        let header = data[0]; //console.log('record',record)\n\n        if (record !== undefined && record.length > 0) {\n          var k; // loop on header columns\n\n          for (k in header) {\n            if (!documentObj.hasOwnProperty(count)) {\n              if (record[k] === undefined) {\n                documentObj.push({\n                  [header[k]]: '-'\n                });\n              } else {\n                documentObj.push({\n                  [header[k]]: record[k]\n                });\n              }\n            } else {\n              if (record[k] === undefined) {\n                documentObj[count][header[k]] = '-';\n              } else {\n                documentObj[count][header[k]] = record[k];\n              } // documentObj[count]['filename'] = file.name;\n              //documentObj[count]['vendor_ID'] = this.props.requiredData.vendor;\n\n            }\n          }\n\n          count++;\n        }\n      }\n\n      this.setState({\n        inputFileData: documentObj\n      }, () => {\n        $('.fullpageloader').hide();\n      });\n    };\n\n    if (rABS) reader.readAsBinaryString(file);else reader.readAsArrayBuffer(file);\n  }\n\n  bulkUpload() {\n    $('.fullpageloader').show();\n    var initialLmt = 0;\n    var factor = 200;\n    var endLmt = initialLmt + factor;\n    var totalrows = this.state.inputFileData.length;\n    var chunkData = [];\n    var excelChunkData = [];\n\n    const startProcess = async data => {\n      for (var i = initialLmt; i < endLmt; i++) {\n        if (this.state.inputFileData[i]) {\n          chunkData.push(this.state.inputFileData[i]); //excelChunkData.push(excelData[i])   \n        } //console.log('i',i)\n        //console.log('endLmt',endLmt)\n\n\n        if (i === endLmt - 1 && i !== totalrows && chunkData.length > 0) {\n          var formValues = {\n            data: chunkData,\n            reqdata: this.props.data,\n            fileName: this.state.fileName,\n            totalRecords: totalrows,\n            updateBadData: i > factor ? false : true\n          }; // console.log('formValue',formValues)\n          // var formValues ={\n          // \"finaldata\"     : chunkData,\n          // \"invalidData\"   : invalidData,\n          // \"reqData\"       : data,\n          // \"excelData\"     : excelChunkData,\n          // \"totalRecords\"  : totalRecords\n          // }\n          // console.log('this.props.url',this.props.url);\n\n          await axios({\n            method: 'post',\n            url: this.props.url,\n            data: formValues\n          }).then(response => {\n            console.log('responsebulk', response);\n\n            if (response.data.completed) {\n              var percentage = Math.round(endLmt * 100 / totalrows);\n\n              if (percentage > 99) {\n                percentage = 100;\n                $('.fullpageloader').hide();\n                $('.filedetailsDiv').show();\n                this.props.getFileDetails(this.state.fileName);\n                this.props.getData(this.state.startRange, this.state.limitRange);\n              }\n\n              this.setState({\n                percentage: percentage\n              }, () => {});\n              chunkData = [];\n              initialLmt += factor;\n              endLmt = initialLmt + factor;\n            }\n          });\n        }\n      }\n    };\n\n    startProcess(this.props.data); // axios.post(this.props.url, formValues)\n    //     .then((response) => {\n    //         this.fileInput.value = '';\n    //         this.setState({inputFileData:[]});\n    //         swal({\n    //           title : response.data.message,\n    //           text  : response.data.message,\n    //         })\n    //         $('.filedetailsDiv').show()\n    //         this.props.getFileDetails(this.state.fileName) \n    //     })\n    //     .catch((error) => {\n    //         console.log('error', error);\n    //     })\n  }\n\n  getData() {}\n\n  render() {\n    const SheetJSFT = [\"xlsx\", \"xls\", \"csv\"];\n    return React.createElement(\"div\", {\n      className: \" container-fluid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(Loader, {\n      type: \"fullpageloader\",\n      percentage: this.state.percentage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"col-lg-12 col-md-12 col-sm-12 col-xs-12 bulkEmployeeContent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"weighttitle col-lg-12 col-md-12 col-xs-12 col-sm-12 NOpadding-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"Bulk Upload\"), React.createElement(\"div\", {\n      className: \"col-lg-2 col-md-2 col-sm-12 col-xs-12 bulkEmployeeImg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: this.props.fileurl,\n      download: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: \"/images/Excel-download-icon.png\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"col-lg-10 col-md-10 col-sm-12 col-xs-12 bulkEmployeeVerif\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"col-lg-12 col-md-12 col-sm-12 col-xs-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"Please use attached file format for bulkupload into this system.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, \"Please do not change the Heading of following file.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \"File format must be .xlsx or .xls.\")))), React.createElement(\"div\", {\n      className: \"col-lg-4 col-md-4 col-sm-4 col-xs-4 bulkuploadFileouter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      ref: el => this.fileInput = el,\n      type: \"file\",\n      className: \"col-lg-12 col-md-12 col-sm-12 col-xs-12 NOpadding\",\n      accept: SheetJSFT,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    })), this.state.inputFileData.length > 0 ? React.createElement(\"div\", {\n      className: \"col-lg-2 col-md-2 col-sm-4 col-xs-4\",\n      style: {\n        marginTop: '2%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"submitBtnGo btn addBtn \",\n      onClick: this.bulkUpload.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(\"div\", {\n      className: \"col-lg-2 col-md-2 col-sm-4 col-xs-4\",\n      style: {\n        marginTop: '2%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"submitBtn btn addBtn bulksubmitbtn\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, \"Submit\")), React.createElement(\"div\", {\n      className: \"col-lg-12 col-md-12 col-sm-12 col-xs-12 filedetailsDiv\",\n      style: {\n        display: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"col-lg-12 col-md-12 col-sm-12 col-xs-12 bulkEmployeeContent NoPadding\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, this.props.fileDetails ? React.createElement(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"nav nav-tabs\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      className: \"active\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      \"data-toggle\": \"tab\",\n      href: \"#failure\" + this.props.failedRecordsCount,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"Failure\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      \"data-toggle\": \"tab\",\n      href: \"#success\" + this.props.goodDataCount,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, \"Success\"))), React.createElement(\"div\", {\n      className: \"tab-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, \"Filename: \", React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, this.state.fileName)), React.createElement(\"div\", {\n      id: \"failure\" + this.props.failedRecordsCount,\n      className: \"tab-pane fade in active\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, \"Out of \", this.props.fileDetails && this.props.fileDetails.totalRecords ? this.props.fileDetails.totalRecords : 0, \" \", this.props.fileDetails && this.props.fileDetails.totalRecords > 1 ? \"records\" : \"record\", \",  \\xA0\", this.props.fileDetails.failedRecords ? this.props.fileDetails.failedRecords.length : \" \", \" bad \", this.props.fileDetails.failedRecords ? this.props.fileDetails.failedRecords.length > 1 ? \"records were \" : \"record was \" : \"\", \"found.\"), React.createElement(\"div\", {\n      className: \"text-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }), React.createElement(ReactHTMLTableToExcel, {\n      id: \"test-table-xls-button\",\n      className: \"download-table-xls-button\",\n      table: \"failedtable\" + this.props.failedRecordsCount,\n      filename: \"tablexls\",\n      sheet: \"tablexls\",\n      buttonText: \"Download as XLS\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: {\n        overflowX: \"auto\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, React.createElement(IAssureTable, {\n      tableHeading: this.props.failedtableHeading,\n      twoLevelHeader: this.state.twoLevelHeader,\n      dataCount: this.props.failedRecordsCount,\n      tableData: this.props.failedRecordsTable,\n      tableObjects: this.state.tableObjects,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }), React.createElement(\"table\", {\n      className: \"table\",\n      width: \"50%\",\n      id: \"failedtable\" + this.props.failedRecordsCount,\n      style: {\n        display: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, this.props.fileDetails.failedRecords && this.props.fileDetails.failedRecords[0] ? Object.entries(this.props.fileDetails.failedRecords[0]).map(([key, value], i) => {\n      return React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, key);\n    }) : null)), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, this.props.fileDetails.failedRecords ? this.props.fileDetails.failedRecords.map((data, index) => {\n      return React.createElement(\"tr\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }, Object.entries(data).map(([key, value], i) => {\n        return React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 293\n          },\n          __self: this\n        }, data[key]);\n      }));\n    }) : null)))), React.createElement(\"div\", {\n      id: \"success\" + this.props.goodDataCount,\n      className: \"tab-pane fade\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, \"Total \", this.props.fileDetails.goodrecords ? this.props.fileDetails.goodrecords.length : \"\", \" \", this.props.fileDetails.totalRecords > 1 ? \"records\" : \"record\", \" found from this file.\"), React.createElement(IAssureTable, {\n      tableHeading: this.props.goodRecordsHeading,\n      twoLevelHeader: this.state.twoLevelHeader,\n      dataCount: this.props.goodDataCount,\n      tableData: this.props.goodRecordsTable //getData={this.getData.bind(this)}\n      ,\n      tableObjects: this.state.tableObjects,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    })))) : null)));\n  }\n\n}\n\nexport default BulkUpload;","map":{"version":3,"sources":["/home/mani/projects/jobportal/webapp/employerportal/src/coreadmin/Master/BulkUpload/BulkUpload.js"],"names":["React","Component","XLSX","axios","swal","$","IAssureTable","ReactHTMLTableToExcel","Loader","BulkUpload","constructor","props","state","tableData","failedRecordsTable","tableObjects","paginationApply","searchApply","fileInput","createRef","handleChange","bind","handleFile","componentWillReceiveProps","e","files","target","fileName","name","ext","split","pop","value","title","text","file","show","setState","reader","FileReader","rABS","readAsBinaryString","onload","result","wb","read","type","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_json","header","documentObj","count","j","length","record","attributeArray","undefined","k","hasOwnProperty","push","inputFileData","hide","readAsArrayBuffer","bulkUpload","initialLmt","factor","endLmt","totalrows","chunkData","excelChunkData","startProcess","i","formValues","reqdata","totalRecords","updateBadData","method","url","then","response","console","log","completed","percentage","Math","round","getFileDetails","getData","startRange","limitRange","render","SheetJSFT","fileurl","el","marginTop","display","fileDetails","failedRecordsCount","goodDataCount","failedRecords","overflowX","failedtableHeading","twoLevelHeader","Object","entries","map","key","index","goodrecords","goodRecordsHeading","goodRecordsTable"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport XLSX from \"xlsx\";\nimport './BulkUpload.css';\nimport axios from 'axios';\nimport swal  from 'sweetalert';\nimport $ from 'jquery';\nimport IAssureTable           from \"./IAssureTable.js\";\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\nimport Loader  from '../../common/Loader/Loader.js'; \n\nclass BulkUpload extends Component{\n\tconstructor(props) {\n    super(props);\n    this.state = {\n    \t\"inputFileData\" : [],\n      tableData:[],\n      failedRecordsTable:[],\n      tableObjects : {\n          paginationApply : false,\n          searchApply     : false\n      },\n      \"startRange\"   : 0,\n      \"limitRange\"   : 10000,\n    }\n    this.fileInput = React.createRef();\n    this.handleChange = this.handleChange.bind(this);\n    this.handleFile   = this.handleFile.bind(this);\n  } \n  componentWillReceiveProps(){\n    \n  }            \n  handleChange(e) {\n    const files = e.target.files;\n    if (files && files[0]){\n      var fileName = files[0].name;\n      var ext = fileName.split('.').pop();\n      if (ext === 'csv' || ext === 'xlsx' || ext === 'xls') {\n         this.handleFile(files[0]);\n      }else{\n        this.fileInput.value = '';\n        swal({\n          title : \" \",\n          text: \"Invalid file format.\"\n        })\n      }\n    }\n  }\n  \n  handleFile(file) {\n    $('.fullpageloader').show();\n    this.setState({fileName: file.name})\n    // console.log(\"this.fileInput\",this.fileInput.value);\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n    reader.onload = ({ target: { result } }) => {\n      const wb = XLSX.read(result, { type: rABS ? \"binary\" : \"array\" });\n      // console.log(\"wb\",wb);\n      const wsname = wb.SheetNames[0];\n      // console.log(\"wsname\",wsname);\n      const ws = wb.Sheets[wsname];\n      // console.log(\"ws\",ws);\n      const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\n      //console.log(\"data\",data);\n      var documentObj = [];\n      let count = 0;\n      for (var j = 1; j <= data.length; j++) {\n        var record = data[j];\n        var attributeArray = [];\n        let header = data[0];\n        //console.log('record',record)\n        if (record !== undefined && record.length > 0) {\n            var k;\n            // loop on header columns\n            for (k in header) {\n                if (!documentObj.hasOwnProperty(count)) {\n                  if (record[k] === undefined) {  \n                    documentObj.push({ [header[k]]: '-' });\n                  }else{\n                    documentObj.push({ [header[k]]: record[k] });\n                  }\n                } \n                else {\n                  if (record[k] === undefined) {\n                   documentObj[count][header[k]] = '-';   \n                  }else{\n                    documentObj[count][header[k]] = record[k];\n                  }\n                  // documentObj[count]['filename'] = file.name;\n                  //documentObj[count]['vendor_ID'] = this.props.requiredData.vendor;\n                }\n            }\n            count++;\n        }\n    }\n      this.setState({inputFileData:documentObj},()=>{\n        $('.fullpageloader').hide()\n      });\n    };\n    if (rABS) reader.readAsBinaryString(file);  \n    else reader.readAsArrayBuffer(file);\n  }\n  bulkUpload() {\n    $('.fullpageloader').show();\n    var initialLmt = 0;\n    var factor = 200;\n    var endLmt = initialLmt+factor;\n    var totalrows = this.state.inputFileData.length;\n    var chunkData = [];\n    var excelChunkData = [];\n\n    \n    const startProcess = async (data)=>{\n      for (var i = initialLmt; i < endLmt; i++) {\n        if (this.state.inputFileData[i]) {\n          chunkData.push(this.state.inputFileData[i]);\n          //excelChunkData.push(excelData[i])   \n        }\n        //console.log('i',i)\n        //console.log('endLmt',endLmt)\n        if (i === endLmt-1 && i !== totalrows && chunkData.length>0) {\n          var formValues = {\n            data      : chunkData,\n            reqdata   : this.props.data,\n            fileName  : this.state.fileName,\n            totalRecords : totalrows,\n            updateBadData : i > factor ? false : true\n          }; \n          // console.log('formValue',formValues)\n          // var formValues ={\n          // \"finaldata\"     : chunkData,\n          // \"invalidData\"   : invalidData,\n          // \"reqData\"       : data,\n          // \"excelData\"     : excelChunkData,\n          // \"totalRecords\"  : totalRecords\n          // }\n          // console.log('this.props.url',this.props.url);\n          await axios({\n            method : 'post',\n            url    : this.props.url,\n            data   : formValues\n          })\n          .then((response)=> {\n            console.log('responsebulk',response)\n            if (response.data.completed) {\n\n              \n              var percentage = Math.round((endLmt*100/totalrows))\n              if (percentage > 99 ) {\n                percentage = 100;\n                \n                $('.fullpageloader').hide();\n                $('.filedetailsDiv').show();\n                this.props.getFileDetails(this.state.fileName); \n                this.props.getData(this.state.startRange, this.state.limitRange) \n              }\n              this.setState({percentage:percentage},()=>{})\n              chunkData = [];\n              initialLmt += factor;  \n              endLmt = initialLmt+factor; \n            }\n          })\n        }\n      }\n    }\n    startProcess(this.props.data);\n\n    \n    // axios.post(this.props.url, formValues)\n    //     .then((response) => {\n            \n    //         this.fileInput.value = '';\n    //         this.setState({inputFileData:[]});\n    //         swal({\n    //           title : response.data.message,\n    //           text  : response.data.message,\n    //         })\n                        \n    //         $('.filedetailsDiv').show()\n    //         this.props.getFileDetails(this.state.fileName) \n    //     })\n    //     .catch((error) => {\n    //         console.log('error', error);\n    //     })\n  }\n  getData(){\n\n  }\n  render() {\n  \tconst SheetJSFT = [\n      \"xlsx\",\n      \"xls\",\n      \"csv\"\n    ]\n    return (\n    \t <div className=\" container-fluid\">\n       <Loader type=\"fullpageloader\" percentage={this.state.percentage}/>\n\t        <div className=\"col-lg-12 col-md-12 col-sm-12 col-xs-12 bulkEmployeeContent\">\n            <h4 className=\"weighttitle col-lg-12 col-md-12 col-xs-12 col-sm-12 NOpadding-right\">Bulk Upload</h4>\n\t          <div className=\"col-lg-2 col-md-2 col-sm-12 col-xs-12 bulkEmployeeImg\">\n\t            <a href={this.props.fileurl} download>\n\t\t            <img src=\"/images/Excel-download-icon.png\" />\n\t            </a>\n\t          </div>\n\t          <div className=\"col-lg-10 col-md-10 col-sm-12 col-xs-12 bulkEmployeeVerif\">\n\t            <ul className=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n\t              <li>Please use attached file format for bulkupload into this system.</li>\n\t              <li>Please do not change the Heading of following file.</li>\n\t              <li>File format must be .xlsx or .xls.</li>\n\t            </ul>\n\t          </div>\n\t        </div>\n\t        <div className=\"col-lg-4 col-md-4 col-sm-4 col-xs-4 bulkuploadFileouter\">\n\t            <input\n\t\t\t          ref={el => this.fileInput = el}\n\t\t\t          type=\"file\"\n\t              className=\"col-lg-12 col-md-12 col-sm-12 col-xs-12 NOpadding\"\n\t\t\t          accept={SheetJSFT}\n\t\t\t          onChange={this.handleChange}\n\t\t\t        />\n\t        </div>\n          {\n            this.state.inputFileData.length > 0 ?\n            <div className=\"col-lg-2 col-md-2 col-sm-4 col-xs-4\" style={{marginTop:'2%'}}>\n              <button className=\"submitBtnGo btn addBtn \"\n              onClick={this.bulkUpload.bind(this)} >Submit</button>\n            </div>           \n            :\n            <div className=\"col-lg-2 col-md-2 col-sm-4 col-xs-4\" style={{marginTop:'2%'}}>\n              <button className=\"submitBtn btn addBtn bulksubmitbtn\"\n                    disabled>Submit</button>\n            </div>        \n          }\n          <div className=\"col-lg-12 col-md-12 col-sm-12 col-xs-12 filedetailsDiv\" style={{display:\"none\"}}>\n        <br/>\n        <div className=\"col-lg-12 col-md-12 col-sm-12 col-xs-12 bulkEmployeeContent NoPadding\">\n          {\n            this.props.fileDetails ?\n            <div className=\"\">\n              <ul className=\"nav nav-tabs\">\n                <li className=\"active\"><a data-toggle=\"tab\" href={\"#failure\"+this.props.failedRecordsCount}>Failure</a></li>\n                <li ><a data-toggle=\"tab\" href={\"#success\"+this.props.goodDataCount}>Success</a></li>\n              </ul>\n              <div className=\"tab-content\">\n              <h5>Filename: <span>{this.state.fileName}</span></h5>\n                <div id={\"failure\"+this.props.failedRecordsCount} className=\"tab-pane fade in active\">\n                <h5>\n                Out of {this.props.fileDetails && this.props.fileDetails.totalRecords ? this.props.fileDetails.totalRecords : 0 } {this.props.fileDetails && this.props.fileDetails.totalRecords > 1 ? \"records\" : \"record\"},  &nbsp;\n\n\n                {this.props.fileDetails.failedRecords ? this.props.fileDetails.failedRecords.length : \" \"} bad {this.props.fileDetails.failedRecords ?(this.props.fileDetails.failedRecords.length > 1 ? \"records were \" : \"record was \" ):\"\"}found.\n                </h5>\n                  <div className=\"text-right\">\n                  <br/>\n                   <ReactHTMLTableToExcel\n                    id=\"test-table-xls-button\"\n                    className=\"download-table-xls-button\"\n                    table={\"failedtable\"+this.props.failedRecordsCount}\n                    filename=\"tablexls\"\n                    sheet=\"tablexls\"\n                    buttonText=\"Download as XLS\"/>\n                      <br/>\n                    </div>  \n                    <div style={{overflowX: \"auto\"}}>\n                    <IAssureTable \n                      tableHeading={this.props.failedtableHeading}\n                      twoLevelHeader={this.state.twoLevelHeader} \n                      dataCount={this.props.failedRecordsCount}\n                      tableData={this.props.failedRecordsTable}\n                      tableObjects={this.state.tableObjects}\n                      />\n\n\n                    <table className=\"table\" width=\"50%\" id={\"failedtable\"+this.props.failedRecordsCount} style={{display:\"none\"}}>\n                      <thead>\n                        <tr>\n\n                        {\n                          this.props.fileDetails.failedRecords && this.props.fileDetails.failedRecords[0] ? \n                          Object.entries(this.props.fileDetails.failedRecords[0]).map( ([key, value], i)=> {\n                           return(<th>{key}</th>);\n                          }) : null\n                        }\n                        </tr>\n                      </thead>\n                      <tbody>\n                      {\n                        this.props.fileDetails.failedRecords ? \n                        this.props.fileDetails.failedRecords.map((data,index)=>{\n                         \n                          return(\n                            <tr key={index}>\n                            { Object.entries(data).map( ([key, value], i)=> {\n                                return(<td>{data[key]}</td>);\n                              })\n                            }\n                          </tr>\n                          );\n                        }) \n                        : null\n                      }\n                      </tbody>\n                    </table>\n                    </div>\n\n                  </div>\n                <div id={\"success\"+this.props.goodDataCount} className=\"tab-pane fade\">\n                  <h5>\n                  {\n                    /*Out of {this.props.fileDetails.totalRecords} {this.props.fileDetails.totalRecords > 1 ? \"records\" : \"record\"},  {this.props.fileDetails.goodrecords.length} {this.props.fileDetails.goodrecords.length > 1 ? \"records are\" : \"record is\" } added successfully. &nbsp;\n                  */}\n\n                  Total {this.props.fileDetails.goodrecords?this.props.fileDetails.goodrecords.length : \"\"} { this.props.fileDetails.totalRecords > 1 ? \"records\" : \"record\"} found from this file.\n                  </h5>\n                      <IAssureTable \n                      tableHeading={this.props.goodRecordsHeading}\n                      twoLevelHeader={this.state.twoLevelHeader} \n                      dataCount={this.props.goodDataCount}\n                      tableData={this.props.goodRecordsTable}\n                      //getData={this.getData.bind(this)}\n                      tableObjects={this.state.tableObjects}\n                      />\n                  {\n                  \n                }\n                </div>\n                \n              </div>\n            </div>  \n            : null\n          }\n        </div>\n      </div>\n    \t</div>\n    )\n  }\n}\nexport default BulkUpload;"]},"metadata":{},"sourceType":"module"}